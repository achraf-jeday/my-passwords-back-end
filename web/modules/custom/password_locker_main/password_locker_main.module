<?php

/**
 * @file
 * Contains password_locker_main.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function password_locker_main_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the password_locker_main module.
    case 'help.page.password_locker_main':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Password Locker main module.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Generate a random string, using a cryptographically secure 
 * pseudorandom number generator (random_int)
 *
 * This function uses type hints now (PHP 7+ only), but it was originally
 * written for PHP 5 as well.
 * 
 * For PHP 7, random_int is a PHP core function
 * For PHP 5.x, depends on https://github.com/paragonie/random_compat
 * 
 * @param int $length      How many characters do we want?
 * @param string $keyspace A string of all possible characters
 *                         to select from
 * @return string
 */
function random_str(
    int $length = 64,
    string $keyspace = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
): string {
    if ($length < 1) {
        throw new \RangeException("Length must be a positive integer");
    }
    $pieces = [];
    $max = mb_strlen($keyspace, '8bit') - 1;
    for ($i = 0; $i < $length; ++$i) {
        $pieces []= $keyspace[random_int(0, $max)];
    }
    return implode('', $pieces);
}

/**
 * Implements hook_entity_insert().
 *
 * Replace passwords of newly created user accounts.
 */
function password_locker_main_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityType()->id() == 'user') {  
    // Generate a random password.
    $pass = random_str(32);
    // Set the generated password.
    $entity->setPassword($pass);
    // Save the user.
    $entity->save();
  }
}
