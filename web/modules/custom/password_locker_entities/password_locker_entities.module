<?php

/**
 * @file
 * Contains password_locker_entities.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function password_locker_entities_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the password_locker_entities module.
    case 'help.page.password_locker_entities':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Contains custom entities for Password Locker.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Check if current user is an administrator.
 *
 * @return bool
 *   Returns a boolean value.
 */
function is_administrator() {
  $current_user = \Drupal::currentUser();
  $user_roles = $current_user->getRoles();
  if (in_array('administrator', $user_roles)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_page_attachments().
 */
function password_locker_entities_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'password_locker_entities/passwords';
}

// See this thread for two way encryption in php:
// https://stackoverflow.com/questions/16600708/how-do-you-encrypt-and-decrypt-a-php-string

/**
 * Encrypt string.
 */
function str_encryptaesgcm($plaintext, $password, $encoding = NULL) {
  if ($plaintext != NULL && $password != NULL) {
    $keysalt = openssl_random_pseudo_bytes(16);
    $key = hash_pbkdf2("sha512", $password, $keysalt, 20000, 32, TRUE);
    $iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length("aes-256-gcm"));
    $tag = "";
    $encryptedstring = openssl_encrypt($plaintext, "aes-256-gcm", $key, OPENSSL_RAW_DATA, $iv, $tag, "", 16);
    return $encoding == "hex" ? bin2hex($keysalt . $iv . $encryptedstring . $tag) : ($encoding == "base64" ? base64_encode($keysalt . $iv . $encryptedstring . $tag) : $keysalt . $iv . $encryptedstring . $tag);
  }
}

/**
 * Decrypt string.
 */
function str_decryptaesgcm($encryptedstring, $password, $encoding = NULL) {
  if ($encryptedstring != NULL && $password != NULL) {
    $encryptedstring = $encoding == "hex" ? hex2bin($encryptedstring) : ($encoding == "base64" ? base64_decode($encryptedstring) : $encryptedstring);
    $keysalt = substr($encryptedstring, 0, 16);
    $key = hash_pbkdf2("sha512", $password, $keysalt, 20000, 32, TRUE);
    $ivlength = openssl_cipher_iv_length("aes-256-gcm");
    $iv = substr($encryptedstring, 16, $ivlength);
    $tag = substr($encryptedstring, -16);
    return openssl_decrypt(substr($encryptedstring, 16 + $ivlength, -16), "aes-256-gcm", $key, OPENSSL_RAW_DATA, $iv, $tag);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function password_locker_entities_password_presave(EntityInterface $entity) {

  $session = \Drupal::request()->getSession();
  $packing_key = $session->get('password_locker_rest.packing_key');

  // Encrypt fields.
  $name = str_encryptaesgcm($entity->get("name")->value, $packing_key, "base64");
  $field_email = str_encryptaesgcm($entity->get("field_email")->value, $packing_key, "base64");
  $field_link = str_encryptaesgcm($entity->get("field_link")->uri, $packing_key, "base64");
  $field_notes = str_encryptaesgcm($entity->get("field_notes")->value, $packing_key, "base64");
  $field_password = str_encryptaesgcm($entity->get("field_password")->value, $packing_key, "base64");
  $field_user_id = str_encryptaesgcm($entity->get("field_user_id")->value, $packing_key, "base64");

  $entity->set("name", $name);
  $entity->set("field_email", $field_email);
  $entity->set("field_link", $field_link);
  $entity->set("field_notes", $field_notes);
  $entity->set("field_password", $field_password);
  $entity->set("field_user_id", $field_user_id);
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function password_locker_entities_password_load($entities) {
  if (!is_administrator()) {
    $session = \Drupal::request()->getSession();
    $packing_key = $session->get('password_locker_rest.packing_key');

    foreach ($entities as $key => $entity) {
      // Decrypt fields.
      $name = str_decryptaesgcm($entities[$key]->get("name")->value, $packing_key, "base64");
      $field_email = str_decryptaesgcm($entities[$key]->get("field_email")->value, $packing_key, "base64");
      $field_link = str_decryptaesgcm($entities[$key]->get("field_link")->uri, $packing_key, "base64");
      $field_notes = str_decryptaesgcm($entities[$key]->get("field_notes")->value, $packing_key, "base64");
      $field_password = str_decryptaesgcm($entities[$key]->get("field_password")->value, $packing_key, "base64");
      $field_user_id = str_decryptaesgcm($entities[$key]->get("field_user_id")->value, $packing_key, "base64");

      $entities[$key]->set("name", $name);
      $entities[$key]->set("field_email", $field_email);
      $entities[$key]->set("field_link", $field_link);
      $entities[$key]->set("field_notes", $field_notes);
      $entities[$key]->set("field_password", $field_password);
      $entities[$key]->set("field_user_id", $field_user_id);
    }
  }
}
